package com.example.restservicedemo.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.example.restservicedemo.domain.Music;

public class MusicManager {
	
	private Connection connection;
	private static final String URL = "jdbc:hsqldb:hsql://localhost/workdb";
	private static final String CREATE_TABLE_MUSIC = "CREATE TABLE Music(id bigint GENERATED BY DEFAULT AS IDENTITY, name varchar(20), authorId bigInt, album varchar(30), genre varchar(20), rd int, FOREIGN KEY(authorId) REFERENCES Artist(id))";
	
	private PreparedStatement addMusicStmt;
	private PreparedStatement deleteMusicStmt;
	private PreparedStatement deleteAllMusicStmt;
	private PreparedStatement updateMusicStmt;
	private PreparedStatement getAllMusicStmt;
	private PreparedStatement getMusicByIdStmt;
	private PreparedStatement findMusicByNameStmt;
	
	private Statement statement;
	
	public MusicManager() {
		try {
			connection = DriverManager.getConnection(URL);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null,
					null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Music".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}
			
			if (!tableExists)
				statement.executeUpdate(CREATE_TABLE_MUSIC);

			addMusicStmt = connection
					.prepareStatement("INSERT INTO Music (id, name, authorId, album, genre, rd) VALUES (?, ?, ?, ?, ?, ?)");
			deleteAllMusicStmt = connection
					.prepareStatement("DELETE FROM Music");
			deleteMusicStmt = connection
					.prepareStatement("DELETE FROM Music WHERE name = ?");
			getAllMusicStmt = connection
					.prepareStatement("SELECT * FROM Music");
			getMusicByIdStmt = connection
					.prepareStatement("SELECT * FROM Music WHERE id = ?");
			updateMusicStmt = connection
					.prepareStatement("UPDATE Music SET name = ? WHERE id = ?");
			findMusicByNameStmt = connection
					.prepareStatement("SELECT * FROM Music WHERE name = ?");
		}
		catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	Connection getConnection() {
		return connection;
	}
	
	public void deleteMusic() {
		try {
			deleteAllMusicStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public int addMusic(Music music) {
		int count = 0;
		try {
			addMusicStmt.setLong(1, music.getId());
			addMusicStmt.setString(2, music.getName());
			addMusicStmt.setLong(3, music.getAuthorId());
			addMusicStmt.setString(4, music.getAlbum());
			addMusicStmt.setString(5, music.getGenre());
			addMusicStmt.setInt(6, music.getRd());

			count = addMusicStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	public int deleteSingleMusic(String name) {
		int count = 0;
		try {
			deleteMusicStmt.setString(1, name);
			
			count = deleteMusicStmt.executeUpdate();
		}
		catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	public int updateMusicName(String new_name, Long id) {
		int count = 0;
		try {
			updateMusicStmt.setString(1, new_name);
			updateMusicStmt.setLong(2, id);
			
			count = updateMusicStmt.executeUpdate();
		}
		catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	public List<Music> getAllMusic() {
		List<Music> music = new ArrayList<Music>();

		try {
			ResultSet rs = getAllMusicStmt.executeQuery();

			while (rs.next()) {
				Music m = new Music();
				m.setId(rs.getLong("id"));
				m.setName(rs.getString("name"));
				m.setAuthorId(rs.getLong("authorId"));
				m.setAlbum(rs.getString("album"));
				m.setGenre(rs.getString("genre"));
				m.setRd(rs.getInt("rd"));

				music.add(m);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return music;
	}
	
	public Music getMusic(Long id) {
		Music m = new Music();
		try {
			getMusicByIdStmt.setLong(1, id);
			ResultSet rs = getMusicByIdStmt.executeQuery();

			while (rs.next()) {
				m.setId(rs.getLong("id"));
				m.setName(rs.getString("name"));
				m.setAuthorId(rs.getLong("authorId"));
				m.setAlbum(rs.getString("album"));
				m.setGenre(rs.getString("genre"));
				m.setRd(rs.getInt("rd"));
				break;
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}		
		return m;
	}
	
	public List<Music> findMusicByName(String name) { //can return multiple songs with same name
		List<Music> music = new ArrayList<Music>();

		try {
			findMusicByNameStmt.setString(1, name);
			ResultSet rs = findMusicByNameStmt.executeQuery();

			while (rs.next()) {
				Music m = new Music();
				m.setId(rs.getLong("id"));
				m.setName(rs.getString("name"));
				m.setAuthorId(rs.getLong("authorId"));
				m.setAlbum(rs.getString("album"));
				m.setGenre(rs.getString("genre"));
				m.setRd(rs.getInt("rd"));

				music.add(m);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return music;
	}
}
